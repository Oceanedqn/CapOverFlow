@inject ITagService TagService
@inject ICategoryService CategoryService

<div class="continer-fluid mt-5">
    <div class="row">
        <div class="col-12">
            @if (Tag.TagId == 0)
            {
                <h4>Create a new Tag</h4>
            }
            else
            {
                <h4> Edit : @Tag.TagName</h4>
            }
        </div>
        <div class="col-12">
            <EditForm Model="Tag" OnSubmit="HandleSubmit">
                <div class="form-group">
                    <label>Nom</label>
                    <InputText @bind-Value="Tag.TagName" class="form-control"></InputText>
                </div>
                <div class="form-group">
                    <label>Categorie</label>
                    <InputSelect @bind-Value="Tag.CtgId" class="form-control">
                        <option value="0"></option>
                        @foreach (var category in Categories)
                        {
                            <option value="@category.CtgId">@category.CtgName</option>
                        }
                    </InputSelect>
                </div>
                @if (Tag.TagId != 0)
                {
                    <button type="submit" class="btn btn-primary">Modifier</button>
                    <button type="button" @onclick="BackToCreate" class="btn btn-secondary">Retour</button>
                }
                else
                {
                    <button type="submit" class="btn btn-primary">Créer</button>
                }
            </EditForm>
        </div>
    </div>
</div>







@code {
    [Parameter]
    public TagDto Tag { get; set; } = new TagDto();
    public TagDto newTag { get; set; } = new TagDto();
    public List<CategoryDto> Categories { get; set; } = new List<CategoryDto>();

    protected override async Task OnParametersSetAsync()
    {
        Categories =  await CategoryService.GetEntities();

        if (Tag.TagId != 0)
        {
            await TagService.GetEntity(Tag.TagId);
        }
    }

    void BackToCreate()
    {
        Tag = new TagDto();

    }

    async void HandleSubmit()
    {
        if (Tag.TagId == 0)
        {   
            newTag = await TagService.CreateEntity(Tag);
            Tag = new TagDto();
        }
        else
        {
            await TagService.UpdateEntity(Tag, Tag.TagId);

        }

    }

}