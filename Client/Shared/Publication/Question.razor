@page "/{typePubli}/{id:int}"
@inject IPublicationService PublicationService
@inject IResponseService ResponseService
@implements IDisposable

@if (question == null)
{
    <span>La question est en chargement</span>
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-12 col-lg-6 mb-3">
                <div class="col-12">
                    <h3 class="text-center form-rounded py-3" style="background-color:@question.Tag.Ctg.CtgColor; color:@question.Tag.Ctg.CtgTextColor;">@question.PbcTitle</h3>
                    <h5>@question.Usr.UsrLastname @question.Usr.UsrFirstname</h5>
                    <p class="text-muted">@question.PbcDate</p>
                </div>
                <div class="col-12">
                    @question.PbcDescription
                </div>
            </div>
            <div class="col-12 col-lg-6 ">
                <div class="col-12 container-fluid form-rounded py-3" style="background-color:@question.Tag.Ctg.CtgColor; height:90vh;">
                    <div>
                        <h5 class="text-center" style="color:@question.Tag.Ctg.CtgTextColor;">Commentaires</h5>
                        <EditForm Model="@react" OnSubmit="@HandleSubmitComment">
                            <DataAnnotationsValidator />
                            <div class="form-group">
                                <InputText @bind-Value="@react.PbcTitle" class="form-control form-rounded" placeholder="Title"></InputText>
                                <ValidationMessage For="@(() => react.PbcTitle)" />
                            </div>
                            <div class="form-group">
                                <InputTextArea @bind-Value="@react.PbcDescription" class="form-control form-rounded" placeholder="Description" rows="4"></InputTextArea>
                                <ValidationMessage For="@(() => react.PbcDescription)" />                               
                            </div>
                            <div class="form-group">
                                <button type="submit" class="btn btn-secondary form-rounded">Répondre</button>
                            </div>
                        </EditForm>
                    </div>
                    <div class="form-rounded" style="height: 58vh; overflow-y: scroll;">
                        <ResponseLayout Responses="responses" />
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public string typePubli { get; set; }

    PublicationDto question = null; //display question
    PublicationDto react = new PublicationDto(); //to complete new response

    List<ResponseDto> comments = new List<ResponseDto>();
    List<PublicationDto> responses = new List<PublicationDto>();


    PublicationDto newResponse = new PublicationDto();
    ResponseDto linkResponse = new ResponseDto();

    protected override async Task OnInitializedAsync()
    {
        ResponseService.OnChange += StateHasChanged;
        PublicationService.OnChange += StateHasChanged;

        question = await PublicationService.GetEntity(Id);
        comments = await ResponseService.GetCommentsById(question.PbcId);
        responses = await PublicationService.GetPublicationResponsesByListComment(comments);

    }

    private async Task HandleSubmitComment()
    {

        if (react.PbcDescription != "" && react.PbcTitle != "")
        {
            react = new PublicationDto
            {
                PbcTitle = react.PbcTitle,
                PbcDescription = react.PbcDescription,
                PbcDate = DateTime.Now,
                PbcResolved = false,
                TagId = question.TagId,
                UsrId = 1,
                TypId = 2,
            };

            newResponse = await PublicationService.CreateEntity(react);

            react = new PublicationDto();

            linkResponse = new ResponseDto
            {
                PbcId = question.PbcId,
                RspPubliId = newResponse.PbcId
            };

            responses.AddRange( await PublicationService.GetPublicationResponsesByListComment(
                new List<ResponseDto>()
                {
                    await ResponseService.CreateEntity(linkResponse)
                }));

        }

    }

    public void Dispose()
    {
        PublicationService.OnChange -= StateHasChanged;
        ResponseService.OnChange -= StateHasChanged;

    }

}
