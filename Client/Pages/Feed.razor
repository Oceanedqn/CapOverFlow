@page "/feed"
@inject IPublicationService PublicationService 
@inject NavigationManager NavigationManager
@implements IDisposable

<h1>Feed</h1>

<p>Toutes les dernières questions.</p>

@if (PublicationService == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Title </th>
                <th>Description</th>
                <th>Resolved</th>
                <th>Date</th>
                <th>User</th>
                <th>Type</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var question in PublicationService.Questions)
            {
            <tr>
                <td>@question.PBC_id</td>
                <td>@question.PBC_title</td>
                <td>@question.PBC_description</td>
                <td>@question.PBC_resolved</td>
                <td>@question.QST_date</td>
                <td>@question.USR_id</td>
                <td>@question.TYP_id</td>
                <td><button class="btn btn-primary" @onclick="(() => EditQuestion(question.PBC_id))">Edit</button></td>
                <td><button class="btn btn-danger" @onclick="(() => DeleteQuestion(question.PBC_id))">X</button></td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    //PublicationDto publicationEdit = new PublicationDto();

    protected override async Task OnInitializedAsync()
    {
        await PublicationService.GetQuestions();
        //PublicationService.Onchange += StateHasChanged;
    }

    public void Dispose()
    {
        //PublicationService.Onchange -= StateHasChanged;
    }

    void EditQuestion(int id)
        {

        }

    void DeleteQuestion(int id)
        {

        }

}