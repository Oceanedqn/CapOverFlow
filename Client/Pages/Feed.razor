@page "/feed"
@inject IPublicationService PublicationService
@inject NavigationManager NavigationManager

<h1>Feed</h1>

<p>Toutes les dernières questions.</p>

@if (PublicationService == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Title </th>
                <th>Description</th>
                <th>Resolved</th>
                <th>Date</th>
                <th>User</th>
                <th>Type</th>
                <th>Tag</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var question in Publications)
            {
                <tr>
                    <td>@question.PBC_id</td>
                    <td>@question.PBC_title</td>
                    <td>@question.PBC_description</td>
                    <td>@question.PBC_resolved</td>
                    <td>@question.QST_date</td>
                    <td>@question.User.USR_firstname @question.User.USR_lastname</td>
                    <td>@question.Type.TYP_name</td>
                    @*@for (var i = question.PBC_id; i < PublicationService.Questions.Count(); i++)
                    {
                        var test = PublicationService.GetPubliTags(question.PBC_id);
                        <td>@test.FirstOrDefault().PBC_title</td>
                    }*@
                </tr>
            }
        </tbody>
    </table>
}

@code {
    public List<PublicationDto> Publications { get; set; } = new List<PublicationDto>();

    protected override async Task OnInitializedAsync()
    {
        Publications = await PublicationService.GetQuestions();
        //foreach (var question in Publications)
        //{
        //    for (var i = question.PBC_id; i < PublicationService.Questions.Count(); i++)
        //    {
        //        question. = PublicationService.GetPubliTags(question.PBC_id);
        //    }
        //}

    }


}