@page "/feed"
@inject IPublicationService PublicationService
@inject NavigationManager NavigationManager

<h1>Feed</h1>

<p>Toutes les dernières questions.</p>

@if (PublicationService == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Title </th>
                <th>Description</th>
                <th>Resolved</th>
                <th>Date</th>
                <th>User</th>
                <th>Type</th>
                <th>Tag</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var question in PublicationService.Entities)
            {
                <tr>
                    <td>@question.PBC_id</td>
                    <td>@question.PBC_title</td>
                    <td>@question.PBC_description</td>
                    <td>@question.PBC_resolved</td>
                    <td>@question.QST_date</td>
                    <td>@question.User.USR_firstname @question.User.USR_lastname</td>
                    <td>@question.Type.TYP_name</td>
                    <td>
                        @foreach (var include in question.Includes)
                        {
                        <p>@include.Tag.TAG_name;</p> 
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    public List<PublicationDto> Publications = new List<PublicationDto>();

    protected override async Task OnInitializedAsync()
    {
        Publications = await PublicationService.GetEntities();
        PublicationService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        PublicationService.OnChange -= StateHasChanged;
    }

}