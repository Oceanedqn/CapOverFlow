@page "/questions"
@inject IPublicationService PublicationService
@inject ITagService TagService
@inject NavigationManager NavigationManager
@implements IDisposable
@using Newtonsoft.Json 

    <div class="container-fluid">
        <div class="row">
            <div class="col-sm">
                <h3>Comment puis-je t'aider ?</h3>
                <EditForm Model="Publication" OnValidSubmit="HandleSubmit">
                    <div class="mb-3">
                        <InputText @bind-Value="Publication.PbcTitle" class="form-control shadow-sm form-rounded" placeholder="Sujet"></InputText>
                    </div>
                    <div class="mb-3">
                        <InputTextArea @bind-Value="Publication.PbcDescription" maxlength="7000" class="form-control shadow-sm form-rounded" rows="5" placeholder="Description"></InputTextArea>
                    </div>
                    @if (Publication.TagId == 0)
                    {
                        <div class="mb-3 input-group">
                            <InputText @bind-Value="CurrentTag.TagName" class="form-control form-rounded" placeholder="Tag" list="txtsearch"></InputText><button type="button" class="btn btn-primary" @onclick="() => AddTagInPubli(CurrentTag.TagName)">+</button>
                            <datalist id="txtsearch">
                                @foreach (var tag in Tags)
                                {
                                    <option value="@tag.TagName"></option>
                                }
                            </datalist>
                        </div>
                    }
                    @if (Publication.TagId != 0)
                    {
                        <div class="mb-3">
                            <label class="form-rounded p-1" value="@Publication.Tag.TagId" style="background-color: @Publication.Tag.Ctg.CtgColor;cursor:pointer;" @onclick="() => RemoveTagInPubli(Publication.Tag)">
                                <span class="badge badge-pill badge-light p-1">@Publication.Tag.TagName</span>
                            </label>
                        </div>
                    }
                    <div class="mb-3">
                        <button type="submit" class="btn btn-secondary form-rounded">Poser la question</button>
                    </div>
                </EditForm>
            </div>
            <div class="col-sm">
                <Feed></Feed>
            </div>
        </div>
    </div>





    @code {
        List<PublicationDto> Publications = new List<PublicationDto>();
        PublicationDto Publication = new PublicationDto();
        List<TagDto> Tags = new List<TagDto>();
        TagDto CurrentTag = new TagDto();

        protected override async Task OnInitializedAsync()
        {
            Tags = await TagService.GetEntities();
            Publications = await PublicationService.GetEntities();
        }



        async void HandleSubmit()
        {
            if (Publication.PbcId == 0 && Publication.TagId != 0 && Publication.PbcTitle != "" && Publication.PbcDescription != "")
            {
                Publication.PbcResolved = false;
                Publication.UsrId = 1;
                Publication.TypId = 1;

                await PublicationService.CreateEntity(Publication);
            }
            Publication = new PublicationDto();
        }

        public void AddTagInPubli(string name)
        {
            if (CurrentTag.TagName != "")
            {
                var temp = Tags.FirstOrDefault(h => h.TagName == name);
                Publication.TagId = temp.TagId;
                Publication.Tag = temp;
            }
        }

        public void RemoveTagInPubli(TagDto tag)
        {
            Publication.TagId = 0;
            Publication.Tag = new TagDto();
            CurrentTag.TagName = "";

        }

        public void Dispose()
        {
            PublicationService.OnChange -= StateHasChanged;
        }
    }