@page "/questions"
@inject IPublicationService PublicationService
@inject ITagService TagService
@inject IIncludeService IncludeService
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="container-fluid">
    <div class="row">
        <div class="col-sm">
            <h3>Comment puis-je t'aider ?</h3>
            <EditForm Model="Publication" OnValidSubmit="HandleSubmit">
                <div class="mb-3">
                    <InputText @bind-Value="Publication.PBC_title" class="form-control shadow-sm form-rounded" placeholder="Sujet"></InputText>
                </div>
                <div class="mb-3">
                    <InputTextArea @bind-Value="Publication.PBC_description" class="form-control shadow-sm form-rounded" rows="5" placeholder="Description"></InputTextArea>
                </div>
                @*Tag input*@
                <div class="mb-3 input-group">
                    <InputText @bind-Value="CurrentTag.TAG_name" class="form-control form-rounded" placeholder="Tag" list="txtsearch"></InputText><button type="button" class="btn btn-primary" @onclick="() => AddTagInListTagPubli(CurrentTag.TAG_name)">+</button>
                    <datalist id="txtsearch">
                        @foreach (var tag in TagsList)
                        {
                            <option value="@tag.TAG_name"></option>
                        }
                    </datalist>
                </div>
                @*Tag vignette*@
                <div class="mb-3">
                    @foreach (TagDto tag in ChooseTag)
                    {
                        <label class="form-rounded pl-2 mr-2" value="@tag.TAG_id" style="background-color:@tag.Categories.CTG_color;">
                            @tag.TAG_name <button type="button" class="btn btn-primary form-rounded" @onclick="() => RemoveTagInListTagPubli(tag)">X</button>
                        </label>
                    }
                </div>
                @*Bouton Poser la question*@
                <button type="submit" class="btn btn-secondary form-rounded">Poser la question</button>
            </EditForm>
        </div>
        <div class="col-sm" style="height: 90vh; overflow-y: scroll;">
            <Feed></Feed>
        </div>
    </div>
</div>





@code {
    PublicationDto Publication = new PublicationDto();
    List<PublicationDto> PubliList = new List<PublicationDto>();
    List<IncludeDto> Includes = new List<IncludeDto>();
    List<TagDto> TagsList = new List<TagDto>();
    List<TagDto> ChooseTag = new List<TagDto>();
    TagDto CurrentTag = new TagDto();

    protected override async Task OnInitializedAsync()
    {
        TagsList = await TagService.GetEntities();
        PubliList = await PublicationService.GetEntities();
        IncludeService.OnChange += StateHasChanged;
    }



    async void HandleSubmit()
    {
        if (Publication.PBC_id == 0)
        {
            var test = await PublicationService.CreateEntity(Publication);
            Publication = new PublicationDto();

            if (ChooseTag.Count != 0)
            {
                foreach (var tag in ChooseTag)
                {
                    await IncludeService.CreateInclude(new IncludeDto
                    {
                        PBC_id = test.PBC_id,
                        TAG_id = tag.TAG_id
                    }); ;
                }
            }

        }
    }

    public void AddTagInListTagPubli(string name)
    {
        if (CurrentTag.TAG_name != "")
        {
            var temp = TagsList.FirstOrDefault(h => h.TAG_name == name);

            if (ChooseTag.Contains(temp))
            {
                CurrentTag = new TagDto();
            }
            else
            {
                ChooseTag.Add(temp);
                CurrentTag = new TagDto();

            }
        }
    }

    public void RemoveTagInListTagPubli(TagDto tag)
    {
        ChooseTag.Remove(TagsList.FirstOrDefault(h => h.TAG_id == tag.TAG_id));
    }

    public void Dispose()
    {
        IncludeService.OnChange -= StateHasChanged;
    }
}